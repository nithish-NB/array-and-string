TC:O(m+n)+O(M)+O(N)
SC:O(N)
in this approach we will start comparing elements from left to right
class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int arr[] = new int[k];
        int l=0;
        int i=0;
        int j=0;
        while(i<m&&j<n){
            if(nums1[i]>nums2[j]){
                arr[l]=nums2[j];
                l++;
                j++;
            }else{
                arr[l]= nums1[i];
                l++;
                i++;

            }
        }
        while(i<m){
            arr[l]= nums1[i];
            i++;
            l++;
        }
        while( j<n){
            arr[l]= nums2[j];
            j++;
            l++;
        }
for(int h=0;h<nums1.length;h++){
    nums1[h]= arr[h];
}     
*/
#########################################################################
TC:O(m+n)+O(N)
SC:O(1)
In this approach we compare elements from right to left 
int i= m+n-1;
int a= m-1;
int b= n-1;
while(a>=0&& b>=0){
    if( nums1[a]<nums2[b]){
        nums1[i]=nums2[b--];
    }else{
        nums1[i]= nums1[a--];
    }
    i--;
    
}
while(b>=0){
        nums1[i]=nums2[b--];
        i--;
    }
    }
}

