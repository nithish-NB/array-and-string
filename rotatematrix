class Solution {
    public void rotate(int[][] matrix) {
      
        for(int i=0;i<matrix.length;i++){
            for(int j=i+1;j<matrix[0].length;j++){
                int temp=matrix[i][j];
                matrix[i][j]=matrix[j][i];
                matrix[j][i]= temp;
            }
        }
        for(int i=0;i<matrix.length;i++){
            for(int j=0;j<(matrix[0].length)/2;j++){
                int t=matrix[0].length-1-j;
                int temp=matrix[i][j];
                matrix[i][j]=matrix[i][t];
                matrix[i][t]= temp;
            }
        }
        
        
    }
}
##############################################################################
class Solution {
    /*
    Brute-Force:
        Observation: In matrix of size n, matrix[i][j] is occupied at res[j][n-1-i]
    */
    public void rotate(int[][] matrix) {
        int r = matrix.length;
        int[][] res = new int[r][r];
        
        for(int i=0; i<r; i++){
            for(int j=0; j<r; j++){
                res[j][r-1-i] = matrix[i][j];
            }
        }
        
        for(int i=0; i<r; i++){
            for(int j=0; j<r; j++){
                matrix[i][j] = res[i][j];
            }
        }
        
    }
}
